%w(read write template).map{|s|
  require_relative "HTML/#{s}.rb"}

# disable RDF library's HTML+RDFa parser/serializer. it's still picking those on ctrl-shift-t or back button, even if the server is no longer running, as if it invisibly preloaded it (but with disabled preloading in browser settings, i think?), returning a page full of RDFa extraction, which in most cases means nothing, or a reader error, since few people use it - this tweak may reduce the frequency of whatever is going on. of course you'll want to remove it if you want to use RDFa. note we're not anti-RDFa, but the annoyance of this issue far outweightgs the joy of any RDFa we've found in the wild which so far seems to mainly be certain Drupal instances. it's being handled well enough by the generic HTML node webization for now (the prime thing would be Uhub comment RDF would probably be slightly improved) that i havent noticed any really weird mappings or anything annoying enough that it would be less total annoyance and warrant turning RDFa format back on thus re-enabling whatever is causing it to spin deep inside the Tilt engine while processing HAML templates. no idea if there's even a bug there or it's just slow (it's what i see when ctrl-C'ing), we emit pathologically-deeply nested nodes from the latest HTML/JSON webizers which no longer are causing stack-limit blowups in our and/or stock serializers, so that's nice, though the 99.9% CPU and occasionally infinitely-growing-RAM-allocations on the worker processes combined with our disinterest in digging in third party code for optimization-points when we have enough of our own to work on means RDFa and its dependencies will go poof for now 

RDF::RDFa::Format.content_type.map{|type|
  RDF::Format.content_types[type] -= [RDF::RDFa::Format]}
