%w(read write template).map{|s|
  require_relative "HTML/#{s}.rb"}

# it's still picking the stock HTML/RDFa parsers/serializers sometimes - on ctrl-shift-t or back button, even if the server is no longer running, as if it invisibly preloaded it (but with disabled preloading in browser settings, i think?). this may reduce the frequency of whatever exactly is going on, and maybe cause new errors if something expected the mapping to exist (lots of triplrs call other ones internally, say when a ld+json snippet is encountered in HTML, plus we added a bunch more of these sorts of things for full recursive embedding). we'll find out if this causes issues. of course you'll want to remove it if you want to use RDFa. note we're not anti-RDFa, it's just that people adopted JSON-ld instead since Google told them to do so for SEO, i think. maybe they do RDFa also but it might just be some checkbox on certain Drupal instance configurations.. it's being handled well enough by the generic HTML node webization for now (the prime thing would be Uhub comment RDF would probably be slightly improved) that i havent noticed any really weird mappings or anything annoying enough that it would be less total annoyance and warrant turning RDFa format back on thus re-enabling whatever is causing it to spin deep inside the Tilt engine while processing HAML templates. no idea if there's even a bug there or it's just slow (it's what i see when ctrl-C'ing), we emit pathologically-deeply nested nodes from the latest HTML/JSON webizers which no longer are causing stack-limit blowups in our and/or stock serializers, so that's nice, though the 99.9% CPU and occasionally infinitely-growing-RAM-allocations on the worker processes combined with our disinterest in digging in third party code for optimization-points when we have enough of our own to work on means RDFa and its dependencies will go poof for now 

RDF::RDFa::Format.content_type.map{|type|
  RDF::Format.content_types[type] -= [RDF::RDFa::Format]}
