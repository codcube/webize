it seems like im never referencing the TODO since there's always obvious pressing bugs on the front of my mind and evident on open tabs , so instead of a TODO im gonna try logging what was DONE instead for a bit. eventually this should go in GIT logs but we need the GIT RDFizer first to get the data out so plaintext will do for now

july20-23 to sep9-23

make env optional on tabular render
make env optional on URI renderer
add linebreaks to tabular renderer
declarative host categories - add forward and UI rehost categories ( extant URL rehost YT rehost categories)
add #relocate method
use relocate method on HREF during format to prevent 301 redirects
declarative feed names for when @rel isn't defined
simplify RSS reader
add StripTags constant, use in more places input happens so <noscript> doesnt hide content we want to see
add #cachestamp method to store base URI inline in HTML header for offline/cache resolution
stop keyboard navigation into upstream-provided input boxes by stripping IDs and autofocus attrs
add toolbar UI rehost links
remove the last site-specific HTML triplr, by merging some google-searchresult CSS hints into the subpost matcher
remove explicit image RDF emission when also emitted in embedded HTML from HTML/feed/mardown triplrs as an alternative to runtime deduplication in the renderer. eventually we might want to turn this behaviour back on but only for summary/preview generation if we ever get around to wanting that enough (Rather than surgically requesting the exact full resources we want all the time, so like casual archive/disk browsing or index generation)
remove all the input format normalization for the Image and Feed renderers since we're no longer running them with arbitrary unprocessed JSON now that we have better blank node support and inlining capabilities at the treeization stage
add activitystream parser subclassed from JSON-LD for newish nostr/fediverse bridge use cases
split #fileMIME into pure and impure versions and use the pure version when we don't need symlink following , dangling symlink existence checking and misc related fs failure handling fun stuff
remove the custom Link renderer, use existing tabular renderer , made by possible by the 'env is optional' changes above since we explicitly don't want request environment hinted rewrites/relocates when outputting the original upstream links
the usual slew of CSS tweaks and rule deletions to keep up with fashions and the goal of eliminating all CSS (won't happen till we write a RDF renderer using some wayland UI toolkit probably. once that's done we can show the video with inlined MPV and show the streaming text output with $TERM and $PAGER and do the input boxes with $EDITOR as the creators intended and finally get rid of the chromium/firefox dependency. note that at no point does JAVASCRIPT enter the picture - not that we particularly hate it but because it was never and still isn't necessary for what we're doing so we'll use stuff we like more, like Ruby + Haskell + sh. the giant $BROWSER binary is the bigger annoyance , we're still on dodgy wifi and go offline and it's as big as 'the rest of the OS combined' in terms of download time, post compilation, and if including compilation it's like 10x the time and RAM to build vs everything else for the OS like a kernel plus musl/sway/foot/fuzzel/emacs, if you run a minimalist alpine setup anyway. typically we cant even build it on our beefiest 4/8gb ARM tablet devices.. it just gets oomkilled. a binary you can't build sounds a lot like proprietary software. oh well at least if you're sufficiently moneyed you can afford to rent a 192GB-RAM cloud build slice for your personal Gentoo install needs so there's that. see devault''s "browsers need to just stop")
add #Resource and #URI methods for instantiation (aka further work on String#R removal, we're getting closer as most are now where a swap over to RDF::Vocab should work, modulo minimal performance regressiosn)
remove #cookieCache. the last place we needed this was the Twitter and Gitter auth-flows, but Gitter switched to Matrix and Twitter antibotted us too much to even look into, the main site is some kind of infinite redirect loop now even in bare chromium with no extensions so IDK wtf happened there
switch RSS selection for reddit from blocklist to allowlist model as they keep adding new paths that no longer provide RSS. the main site is now often broken in this regard, and is treating name.rss as a missing resource etc. misc above changes were due to these last two issues and paving the way to enabling default/automagic forwarding to old.reddit.com and nitter and complete erasure of links to the RSS-sundowning/NonLoggedInUser-hating sites
remove a DNS lookup incurred for local vs remote determination. still likely to get these once HTTP libraries are invoked of course, but we don't add our own
add timeouts to the fetcher to try to make the 'huge feed list with now MIA or temp unavailable servers' scenario return faster. still getting some weird as-yet-undiagnosed hangs deep in URI.open/Net::HTTP or something. probably going to have to switch the main fetcher over to ioquatix's async-http stuff to make this issue go away. and wouldn't it be embarassing if some of thee hangs are due to our DNS server being so naiive, idk if that could be related but it's also slated for ioquatixization but a lot of the exapmles seemed to not work so idk what's up with that as overall i've experienced nothing but quality from him but who am i to talk i dont even have unit tests yet oh hey someone might have a somehow nonworking example file but we'll at least have to read the source to port our DNS stuff over. a 75-feed list still kind of works given the current state of affairs but the 500-feed list for boston news is basically completely unusable so idk anything unless it hits the scanner on 460.225 or staco posts about it on the elon musk site
remove ever expanding list of errors to catch on the fetcher - catch em all and add a logger for HTML and console output
add a new path into multi-fetcher based on existence of local uri-list files
simplify #hostGET using changes above like the pure URI-relocation methods and elimination of no-longer-used endpoints
normalization of windows-1252 name variants
usual slew of blocklist and metadata-map additions and subscription-list maintenance (all but the huge one blocked on nonasyncwtf issue)
